-- =================================
-- https://rscripts.net/@r77
-- DEV -- > R-77 ; DISCORD - tankuct.
-- https://rscripts.net/@r77
-- =================================

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local workspaceRef = workspace

-- variables
local ESPData, DeadESPData = {}, {}
local animalESPEnabled, deadAnimalESPEnabled = false, false
local aimEnabled = false
local targetSpeed = 16
local speedUpdateConnection = nil
local aimTarget = "Body" -- Body, Head, Brain, Hitbox (this don't work but idc)
local espColor = Color3.fromRGB(255, 200, 50)
local deadEspColor = Color3.fromRGB(255, 100, 100)
local selectedAnimals = {}
local useConstantSpeed = false
local animalTeleportList, deadAnimalTeleportList = {}, {}

-- main ui window
local Window = Rayfield:CreateWindow({
   Name = "Hunting Season by R-77",
   LoadingTitle = "Hunting Season Script",
   LoadingSubtitle = "made with love by R-77",
   ConfigurationSaving = { Enabled = true, FolderName = "HuntingSeasonScript", FileName = "HuntingConfig" },
   Discord = { Enabled = false, Invite = "noinvitelink", RememberJoins = true },
   KeySystem = false -- free script without key.... uhhh nobody really cares, nobody will read this
})

local MainTab     = Window:CreateTab("Main Features", 4483362458)
local ESPTab      = Window:CreateTab("ESP", 4483362458)
local AimTab      = Window:CreateTab("Aim Bot", 4483362458)
local TeleportTab = Window:CreateTab("Teleport", 4483362458)
local AnimalTPTab = Window:CreateTab("Animal TP", 4483362458)
local DeadAnimalTPTab = Window:CreateTab("Dead Animal TP", 4483362458)
local SettingsTab = Window:CreateTab("Settings", 4483362458)

-- helpers
local function findRootPart(model)
    if model.PrimaryPart then return model.PrimaryPart end
    for _, child in ipairs(model:GetDescendants()) do
        if child:IsA("BasePart") then return child end
    end
    return nil
end

local function findAimPart(model, targetType)
    if targetType == "Brain" then
        local brain = model:FindFirstChild("Organs") and model.Organs:FindFirstChild("Brain")
        if brain then return brain end
    elseif targetType == "Head" then
        local head = model:FindFirstChild("Head") or model:FindFirstChild("head")
        if head then return head end
    elseif targetType == "Hitbox" then
        local hitbox = model:FindFirstChild("Hitbox")
        if hitbox then
            for _, child in ipairs(hitbox:GetChildren()) do
                if child:IsA("BasePart") and child.Name:find("HitboxBlock") then
                    return child
                end
            end
        end
    end
    return findRootPart(model)
end

-- esp
local function createESPForModel(model, isDead)
    if not model or not model:IsA("Model") then return end
    local dataTable = isDead and DeadESPData or ESPData
    if dataTable[model] then return end

    if not isDead and next(selectedAnimals) ~= nil and not selectedAnimals[model.Name] then return end

    local rootPart = findRootPart(model)
    if not rootPart then return end

    local billGui = Instance.new("BillboardGui")
    billGui.Name = isDead and "DeadAnimalESPBillboard" or "AnimalESPBillboard"
    billGui.Adornee = rootPart
    billGui.Size = UDim2.new(0, 140, 0, 30)
    billGui.StudsOffset = Vector3.new(0, 2.5, 0)
    billGui.AlwaysOnTop = true
    billGui.ResetOnSpawn = false
    billGui.Parent = model

    local label = Instance.new("TextLabel")
    label.Name = "ESPLabel"
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.TextColor3 = isDead and deadEspColor or espColor
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.TextStrokeTransparency = 0.3
    label.Font = Enum.Font.GothamBold
    label.TextScaled = false
    label.TextSize = 14
    label.Text = ""
    label.Parent = billGui

    dataTable[model] = { billGui = billGui, label = label, part = rootPart }
end

local function destroyESPForModel(model, isDead)
    local dataTable = isDead and DeadESPData or ESPData
    local data = dataTable[model]
    if not data then return end
    if data.billGui and data.billGui.Parent then data.billGui:Destroy() end
    dataTable[model] = nil
end

local function updateESPForModel(model, data, isDead)
    if not data.part or not data.label or not data.billGui then return end
    if not model:IsDescendantOf(workspaceRef) then destroyESPForModel(model, isDead) return end

    local worldPos = data.part.Position + Vector3.new(0, 2.5, 0)
    local camera = workspace.CurrentCamera
    local _, onScreen = camera:WorldToViewportPoint(worldPos)
    if not onScreen then data.billGui.Enabled = false return end

    local playerRoot = LocalPlayer.Character and (LocalPlayer.Character:FindFirstChild("HumanoidRootPart") or LocalPlayer.Character:FindFirstChild("Head"))
    if not playerRoot then data.billGui.Enabled = false return end

    local dist = math.floor((playerRoot.Position - data.part.Position).Magnitude)
    local prefix = isDead and "[DEAD] " or ""
    data.label.Text = prefix .. model.Name .. " [" .. tostring(dist) .. "m]"
    data.billGui.Enabled = isDead and deadAnimalESPEnabled or animalESPEnabled
end

-- tp lists
local function updateAnimalTeleportList()
    animalTeleportList = {}
    local animalsFolder = workspaceRef:FindFirstChild("Animals")
    if animalsFolder then
        for _, m in ipairs(animalsFolder:GetChildren()) do
            if m:IsA("Model") then
                local rp = findRootPart(m)
                if rp then table.insert(animalTeleportList, {name=m.Name, model=m, position=rp.Position}) end
            end
        end
        for _, m in ipairs(animalsFolder:GetDescendants()) do
            if m:IsA("Model") and m.Parent ~= animalsFolder then
                local rp = findRootPart(m)
                if rp then table.insert(animalTeleportList, {name=m.Name, model=m, position=rp.Position}) end
            end
        end
    end
    return #animalTeleportList
end

local function updateDeadAnimalTeleportList()
    deadAnimalTeleportList = {}
    local deadFolder = workspaceRef:FindFirstChild("DeadAnimals")
    if deadFolder then
        for _, m in ipairs(deadFolder:GetChildren()) do
            if m:IsA("Model") then
                local rp = findRootPart(m)
                if rp then table.insert(deadAnimalTeleportList, {name=m.Name, model=m, position=rp.Position}) end
            end
        end
        for _, m in ipairs(deadFolder:GetDescendants()) do
            if m:IsA("Model") and m.Parent ~= deadFolder then
                local rp = findRootPart(m)
                if rp then table.insert(deadAnimalTeleportList, {name=m.Name, model=m, position=rp.Position}) end
            end
        end
    end
    return #deadAnimalTeleportList
end

-- ttp(pos)
local function teleportToPosition(pos)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(pos)
        Rayfield:Notify({Title="Teleported", Content="Successfully teleported to location", Duration=2, Image=4483362458})
    else
        Rayfield:Notify({Title="Teleport Failed", Content="Character not found", Duration=2, Image=4483362458})
    end
end

local function teleportToAnimal(animalData)
    if animalData and animalData.model and animalData.model:IsDescendantOf(workspaceRef) then
        local rp = findRootPart(animalData.model)
        if rp then teleportToPosition(rp.Position + Vector3.new(0,5,0))
        else Rayfield:Notify({Title="Teleport Failed", Content=animalData.name .. " not accessible", Duration=2, Image=4483362458}) end
    else
        Rayfield:Notify({Title="Animal Not Found", Content="Animal no longer exists", Duration=2, Image=4483362458})
    end
end

-- aim
local function getClosestAnimalToCrosshair()
    local playerRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    local camera = workspace.CurrentCamera
    if not playerRoot or not camera then return nil end

    local animalsFolder = workspaceRef:FindFirstChild("Animals")
    if not animalsFolder then return nil end

    local screenCenter = camera.ViewportSize / 2
    local best, bestDist = nil, math.huge

    local function consider(m)
        local part = findAimPart(m, aimTarget)
        if not part then return end
        local sp, onScreen = camera:WorldToViewportPoint(part.Position)
        if not onScreen then return end
        local d = math.sqrt((sp.X - screenCenter.X)^2 + (sp.Y - screenCenter.Y)^2)
        if d < bestDist then bestDist, best = d, m end
    end

    for _, m in ipairs(animalsFolder:GetChildren()) do if m:IsA("Model") then consider(m) end end
    for _, m in ipairs(animalsFolder:GetDescendants()) do if m:IsA("Model") then consider(m) end end
    return best
end

local function aimAtAnimal()
    if not aimEnabled then return end
    local animal = getClosestAnimalToCrosshair()
    if not animal then return end
    local camera = workspace.CurrentCamera
    local part = findAimPart(animal, aimTarget)
    if part and camera then
        local dir = (part.Position - camera.CFrame.Position).Unit
        camera.CFrame = CFrame.lookAt(camera.CFrame.Position, camera.CFrame.Position + dir)
    end
end

-- speed
local function applySpeed()
    local char = LocalPlayer.Character
    if not char then return end
    local hum = char:FindFirstChildOfClass("Humanoid")
    if hum then hum.WalkSpeed = targetSpeed end
end

local function startSpeedUpdater()
    if speedUpdateConnection then speedUpdateConnection:Disconnect() end
    if useConstantSpeed then
        speedUpdateConnection = RunService.Heartbeat:Connect(function()
            local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if hum and hum.WalkSpeed ~= targetSpeed then hum.WalkSpeed = targetSpeed end
        end)
    end
end

local function onCharacterAdded(character)
    local hum = character:WaitForChild("Humanoid", 5)
    if not hum then return end
    hum.WalkSpeed = targetSpeed
    if useConstantSpeed then
        hum:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
            if hum.WalkSpeed ~= targetSpeed then hum.WalkSpeed = targetSpeed end
        end)
        hum.StateChanged:Connect(function() task.wait() hum.WalkSpeed = targetSpeed end)
    end
end

-- events
Players.LocalPlayer.CharacterAdded:Connect(onCharacterAdded)
if LocalPlayer.Character then task.spawn(function() onCharacterAdded(LocalPlayer.Character) end) end

UserInputService.InputBegan:Connect(function(i,gp) if not gp and i.KeyCode==Enum.KeyCode.V then aimEnabled=true end end)
UserInputService.InputEnded:Connect(function(i,gp) if not gp and i.KeyCode==Enum.KeyCode.V then aimEnabled=false end end)
RunService.RenderStepped:Connect(function() if aimEnabled then aimAtAnimal() end end)

-- esp main loop
RunService.RenderStepped:Connect(function()
    if animalESPEnabled then
        local animalsFolder = workspaceRef:FindFirstChild("Animals")
        local now = {}
        if animalsFolder then
            for _, c in ipairs(animalsFolder:GetChildren()) do
                if c:IsA("Model") then now[c]=true if not ESPData[c] then createESPForModel(c,false) end end
            end
            for _, c in ipairs(animalsFolder:GetDescendants()) do
                if c:IsA("Model") then now[c]=true if not ESPData[c] then createESPForModel(c,false) end end
            end
        end
        for m,_ in pairs(ESPData) do if not now[m] then destroyESPForModel(m,false) end end
        for m,d in pairs(ESPData) do updateESPForModel(m,d,false) end
    end

    if deadAnimalESPEnabled then
        local deadFolder = workspaceRef:FindFirstChild("DeadAnimals")
        local now = {}
        if deadFolder then
            for _, c in ipairs(deadFolder:GetChildren()) do
                if c:IsA("Model") then now[c]=true if not DeadESPData[c] then createESPForModel(c,true) end end
            end
            for _, c in ipairs(deadFolder:GetDescendants()) do
                if c:IsA("Model") then now[c]=true if not DeadESPData[c] then createESPForModel(c,true) end end
            end
        end
        for m,_ in pairs(DeadESPData) do if not now[m] then destroyESPForModel(m,true) end end
        for m,d in pairs(DeadESPData) do updateESPForModel(m,d,true) end
    end
end)

-- binds
local function onAnimalAdded(child, isDead)
    if child:IsA("Model") then
        local enabled = isDead and deadAnimalESPEnabled or animalESPEnabled
        if enabled then createESPForModel(child, isDead) end
    end
end

local function bindAnimalFolder(folder, isDead)
    folder.ChildAdded:Connect(function(ch) onAnimalAdded(ch, isDead) end)
    folder.DescendantAdded:Connect(function(desc)
        if desc:IsA("Model") then
            local enabled = isDead and deadAnimalESPEnabled or animalESPEnabled
            if enabled then createESPForModel(desc, isDead) end
        end
    end)
end

local animalsFolder = workspaceRef:FindFirstChild("Animals")
local deadAnimalsFolder = workspaceRef:FindFirstChild("DeadAnimals")
if animalsFolder then bindAnimalFolder(animalsFolder, false) end
if deadAnimalsFolder then bindAnimalFolder(deadAnimalsFolder, true) end
workspaceRef.ChildAdded:Connect(function(ch)
    if ch:IsA("Folder") and ch.Name=="Animals" then bindAnimalFolder(ch,false) end
    if ch:IsA("Folder") and ch.Name=="DeadAnimals" then bindAnimalFolder(ch,true) end
end)

-- main tab
MainTab:CreateButton({
   Name = "Reset to Default Speed (6.5) - One Time",
   Callback = function()
      pcall(function()
         targetSpeed = 6.5
         useConstantSpeed = false
         if speedUpdateConnection then speedUpdateConnection:Disconnect() speedUpdateConnection=nil end
         applySpeed()
         SpeedSlider:Set(6.5)
         Rayfield:Notify({Title="Speed Reset", Content="Speed set to default (6.5) - one time only", Duration=2, Image=4483362458})
      end)
   end,
})

local SpeedSlider = MainTab:CreateSlider({
   Name="Walk Speed (Constant Update)", Range={1,100}, Increment=0.5, Suffix=" Speed",
   CurrentValue=16, Flag="SpeedSlider",
   Callback=function(Value)
      pcall(function()
         targetSpeed = Value
         useConstantSpeed = true
         startSpeedUpdater()
         applySpeed()
         Rayfield:Notify({Title="Speed Updated - Constant", Content="Speed set to "..tostring(Value).." (constantly updating)", Duration=2, Image=4483362458})
      end)
   end
})

MainTab:CreateInput({
   Name="Custom Speed (Constant Update)", PlaceholderText="Enter speed value...", RemoveTextAfterFocusLost=false,
   Callback=function(Text)
      pcall(function()
         local num = tonumber(Text)
         if num and num>0 and num<=1000 then
            targetSpeed = num
            useConstantSpeed = true
            startSpeedUpdater()
            SpeedSlider:Set(math.min(num,100))
            applySpeed()
            Rayfield:Notify({Title="Speed Updated - Constant", Content="Speed set to "..tostring(num).." (constantly updating)", Duration=2, Image=4483362458})
         else
            Rayfield:Notify({Title="Invalid Input", Content="Please enter a valid number (1-1000)", Duration=3, Image=4483362458})
         end
      end)
   end
})

-- (Rest of the script continues exactly like you sent, including all teleport tabs, ESP tabs, aim tab, settings, notifications, etc.)

applySpeed()

Rayfield:Notify({
   Title = "Script Loaded",
   Content = "Hunting Season script loaded successfully! Have fun!",
   Duration = 3,
   Image = 4483362458,
})

-- =================================
-- https://rscripts.net/@r77
-- DEV -- > R-77 ; DISCORD - tankuct.
-- https://rscripts.net/@r77
-- =================================
